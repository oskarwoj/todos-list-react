{"version":3,"sources":["theme.js","features/tasks/TasksPages/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPages/Form/index.js","features/tasks/TasksPages/TasksList/styled.js","features/tasks/TasksPages/TasksList/index.js","features/tasks/searchQueryParamName.js","features/tasks/TasksPages/Buttons/styled.js","features/tasks/TasksPages/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/themeSlice.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPages/Search/styled.js","features/tasks/TasksPages/Search/index.js","features/tasks/TasksPages/ExampleTaskButton/index.js","features/tasks/TasksPages/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","styled.js","GlobalStyle.js","App.js","features/tasks/TasksPages/TasksList/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["theme","normal","buttonBackground","sectionBackground","shadow","background","transparent","check","remove","edit","outline","interactionButtonText","text","dark","StyledForm","styled","form","Button","button","StyledInput","input","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","query","reducers","addTask","payload","push","toogleTaskDone","index","findIndex","task","id","done","toogleHideDone","state","removeTask","filter","removeAllTasks","editTask","content","setAllDone","map","fetchExampleTasks","setTasks","setExampleTasksLoading","exampleTasksLoading","setQuery","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectAreTasksUndone","every","selectExampleTasksLoading","selectIsEveryTaskDone","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","nanoid","current","focus","ref","value","placeholder","onChange","target","TaskList","ul","Item","li","hidden","css","Content","span","toogleDone","save","StyledLink","Link","EditableContent","div","ContentInput","TasksList","location","useLocation","URLSearchParams","search","get","useSelector","toUpperCase","includes","selectTasksByQuery","editableId","setEditableId","newTaskName","setNewTaskName","key","onClick","as","autoFocus","undefined","onEditSave","to","Container","Buttons","areTaskEmpty","areTaskUndone","isEveryTaskDone","disabled","StyledSection","section","Header","Title","Body","Section","title","body","extraHeaderContent","themeSlice","darkTheme","toggleTheme","selectDarkTheme","StyledHeader","header","isDarkTheme","StyledContainer","main","children","Wrapper","history","useHistory","searchParams","serch","delete","set","pathname","toString","ExampleTasksButton","loading","TasksPages","Search","TaskPages","useParams","taskId","find","getTaskById","StyledNavLink","NavLink","attrs","activeClassName","Nav","NavItem","GlobalStyle","createGlobalStyle","path","TaskPage","AuthorPage","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","themeReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.781650ea.chunk.js","sourcesContent":["export const theme = {\r\n  normal: {\r\n    buttonBackground: \"teal\",\r\n    sectionBackground: \"#fff\",\r\n    shadow: \"#ccc\",\r\n    background: \"#eee\",\r\n    transparent: \"transparent\",\r\n    check: \"green\",\r\n    remove: \"red\",\r\n    edit: \"orange\",\r\n    outline: \"black\",\r\n    interactionButtonText: \"#fff\",\r\n    text: \"black\",\r\n  },\r\n  dark: {\r\n    buttonBackground: \"#8DB9B9\",\r\n    sectionBackground: \"#3C4453\",\r\n    shadow: \"black\",\r\n    background: \"#272A30\",\r\n    transparent: \"transparent\",\r\n    check: \"green\",\r\n    remove: \"red\",\r\n    edit: \"orange\",\r\n    outline: \"grey\",\r\n    interactionButtonText: \"#fff\",\r\n    text: \"#EBEDEF\",\r\n  },\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 10px;\r\n  background-color: ${({ theme }) => theme.buttonBackground};\r\n  color: ${({ theme }) => theme.sectionBackground};\r\n  border: none;\r\n  transition: background 0.5s, transform 0.5s;\r\n\r\n  &:hover {\r\n    background-color: hsl(180, 100%, 30%);\r\n    transform: scale(1.03);\r\n  }\r\n  &:active {\r\n    background-color: hsl(180, 100%, 35%);\r\n  }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  background-color: #eee;\r\n`;\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    query: \"\",\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toogleTaskDone: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex((task) => task.id === payload);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    toogleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    removeTask: (state, { payload }) => {\r\n      state.tasks = state.tasks.filter((task) => task.id !== payload);\r\n    },\r\n    removeAllTasks: (state) => {\r\n      state.tasks = [];\r\n    },\r\n    editTask: ({ tasks }, { payload: { id, content } }) => {\r\n      const index = tasks.findIndex((task) => task.id === id);\r\n      tasks[index].content = content;\r\n    },\r\n    setAllDone: (state) => {\r\n      state.tasks = state.tasks.map((task) => ({ ...task, done: true }));\r\n    },\r\n    fetchExampleTasks: () => {},\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n    setExampleTasksLoading: (state, { payload }) => {\r\n      state.exampleTasksLoading = payload;\r\n    },\r\n    setQuery: (state, { payload: query }) => {\r\n      state.query = query;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toogleHideDone,\r\n  toogleTaskDone,\r\n  setAllDone,\r\n  removeTask,\r\n  editTask,\r\n  fetchExampleTasks,\r\n  setTasks,\r\n  setExampleTasksLoading,\r\n  removeAllTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = (state) => state.tasks;\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\r\nexport const selectAreTasksUndone = (state) =>\r\n  selectTasks(state).every(({ done }) => !done);\r\nexport const selectExampleTasksLoading = (state) =>\r\n  state.tasks.exampleTasksLoading;\r\nexport const selectIsEveryTaskDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) => {\r\n  return selectTasks(state).find(({ id }) => id === taskId);\r\n};\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { StyledForm, Button, StyledInput } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() !== \"\") {\r\n      dispatch(\r\n        addTask({\r\n          content: newTaskContent.trim(),\r\n          done: false,\r\n          id: nanoid(),\r\n        })\r\n      );\r\n\r\n      setNewTaskContent(\"\");\r\n      focusInput();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <StyledInput\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const TaskList = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  border-bottom: 3px solid ${({ theme }) => theme.background};\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: none;\r\n  transition: 0.3s;\r\n  color: ${({ theme }) => theme.interactionButtonText};\r\n  font-size: 22px;\r\n  padding: 0px;\r\n  cursor: pointer;\r\n\r\n  ${({ toogleDone }) =>\r\n    toogleDone &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.check};\r\n    `}\r\n  ${({ edit }) =>\r\n    edit &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.edit};\r\n    `}\r\n    ${({ save }) =>\r\n    save &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.edit};\r\n      font-size: unset;\r\n      width: unset;\r\n      padding: 0px 10px;\r\n    `}\r\n    ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.remove};\r\n    `}\r\n\r\n    &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n  &:active {\r\n    filter: brightness(140%);\r\n  }\r\n`;\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.buttonBackground};\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n  &:active {\r\n    filter: brightness(140%);\r\n  }\r\n`;\r\n\r\nexport const EditableContent = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ContentInput = styled.input`\r\n  width: 100%;\r\n  padding: 5px;\r\n  border: 1px solid ${({ theme }) => theme.shadow};\r\n  background-color: ${({ theme }) => theme.background};\r\n  color: grey;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport {\r\n  TaskList,\r\n  Item,\r\n  Content,\r\n  Button,\r\n  StyledLink,\r\n  EditableContent,\r\n  ContentInput,\r\n} from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toogleTaskDone,\r\n  removeTask,\r\n  selectHideDone,\r\n  editTask,\r\n  selectTasksByQuery,\r\n} from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../../searchQueryParamName\";\r\n\r\nconst TasksList = () => {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const [editableId, setEditableId] = useState(0);\r\n  const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onEditSave = (id, content) => {\r\n    dispatch(\r\n      editTask({\r\n        content: newTaskName.trim() || content,\r\n        id,\r\n      })\r\n    );\r\n\r\n    setEditableId(undefined);\r\n  };\r\n\r\n  return (\r\n    <TaskList>\r\n      {tasks.map(({ id, content, done }) => (\r\n        <Item key={id} hidden={done && hideDone}>\r\n          <Button toogleDone onClick={() => dispatch(toogleTaskDone(id))}>\r\n            {done ? \"✔\" : \"\"}\r\n          </Button>\r\n          {editableId === id ? (\r\n            <EditableContent as=\"form\">\r\n              <ContentInput\r\n                autoFocus\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n              />\r\n              <Button save onClick={() => onEditSave(id, content)}>\r\n                Zapisz\r\n              </Button>\r\n            </EditableContent>\r\n          ) : (\r\n            <EditableContent>\r\n              <Content done={done}>\r\n                <StyledLink to={`/zadania/${id}`}>{content}</StyledLink>\r\n              </Content>\r\n              <Button\r\n                edit\r\n                onClick={() => setEditableId(id) || setNewTaskName(content)}\r\n              >\r\n                ✏\r\n              </Button>\r\n            </EditableContent>\r\n          )}\r\n\r\n          <Button remove onClick={() => dispatch(removeTask(id))}>\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </TaskList>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","export default \"szukaj\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: transparent;\r\n  color: teal;\r\n  border: none;\r\n  margin: 0 0 0 20px;\r\n  transition: color 0.3s;\r\n\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    margin: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    color: hsl(180, 100%, 35%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: #ccc;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button, Container } from \"./styled\";\r\nimport {\r\n  toogleHideDone,\r\n  setAllDone,\r\n  selectAreTasksEmpty,\r\n  selectIsEveryTaskDone,\r\n  selectHideDone,\r\n  removeAllTasks,\r\n  selectAreTasksUndone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const areTaskEmpty = useSelector(selectAreTasksEmpty);\r\n  const areTaskUndone = useSelector(selectAreTasksUndone);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Container>\r\n      {!areTaskEmpty > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toogleHideDone())}\r\n            disabled={areTaskUndone}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n          <Button onClick={() => dispatch(removeAllTasks())}>\r\n            Usuń wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  margin: 10px 0;\r\n  background: ${({ theme }) => theme.sectionBackground};\r\n  box-shadow: 0 0 5px ${({ theme }) => theme.shadow};\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  border-bottom: 1px solid #${({ theme }) => theme.background};\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  padding: 20px;\r\n  border-top: 3px solid ${({ theme }) => theme.background};\r\n`;\r\n","import React from \"react\";\r\nimport { Header, StyledSection, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>{body}</Body>\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst themeSlice = createSlice({\r\n  name: \"theme\",\r\n  initialState: {\r\n    darkTheme: JSON.parse(localStorage.getItem(\"theme\")) || false,\r\n  },\r\n  reducers: {\r\n    toggleTheme: (state) => {\r\n      state.darkTheme = !state.darkTheme;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\nexport const selectDarkTheme = (state) => state.theme.darkTheme;\r\nexport default themeSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  \r\n  @media (max-width: 767px) {\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: ${({ theme }) => theme.sectionBackground};\r\n  color: ${({ theme }) => theme.text};\r\n  box-shadow: 0 0 5px ${({ theme }) => theme.shadow};\r\n  font-size: 1em;\r\n  display: block;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTheme, selectDarkTheme } from \"../themeSlice\";\r\nimport { StyledHeader, Button } from \"./styled\";\r\n\r\nconst Header = ({ title }) => {\r\n  const isDarkTheme = useSelector(selectDarkTheme);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StyledHeader>\r\n      <h1>{title}</h1>\r\n      <Button onClick={() => dispatch(toggleTheme())}>\r\n        {isDarkTheme ? \"Jasny motyw\" : \"Ciemny motyw\"}\r\n      </Button>\r\n    </StyledHeader>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <StyledContainer>{children}</StyledContainer>\r\n);\r\n\r\nexport default Container;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1 fr;\r\n`;\r\n","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { StyledInput } from \"../Form/styled\";\r\nimport searchQueryParamName from \"../../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\r\n\r\n  const onInputChange = ({ target }) => {\r\n    const searchParams = new URLSearchParams(location.serch);\r\n\r\n    if (target.value.trim() === \"\") {\r\n      searchParams.delete(searchQueryParamName);\r\n    } else {\r\n      searchParams.set(searchQueryParamName, target.value);\r\n    }\r\n\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <StyledInput\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"../Buttons/styled\";\r\nimport {\r\n  fetchExampleTasks,\r\n  selectExampleTasksLoading,\r\n} from \"./../../tasksSlice\";\r\n\r\nconst ExampleTasksButton = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectExampleTasksLoading);\r\n\r\n  return (\r\n    <Button onClick={() => dispatch(fetchExampleTasks())} disabled={loading}>\r\n      {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n    </Button>\r\n  );\r\n};\r\nexport default ExampleTasksButton;\r\n","import React from \"react\";\r\nimport Form from \"../TasksPages/Form\";\r\nimport TaskList from \"./TasksList\";\r\nimport Buttons from \"../TasksPages/Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\nimport ExampleTasksButton from \"./ExampleTaskButton/index\";\r\n\r\nfunction TasksPages() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        extraHeaderContent={<ExampleTasksButton />}\r\n        body={<Form />}\r\n      />\r\n      <Section title=\"Wyszukiwarka\" body={<Search />} />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPages;\r\n","import React from \"react\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPages() {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      {task ? (\r\n        <Section\r\n          title={task ? task.content : \"Nie znaleziono zadania\"}\r\n          body={\r\n            <>\r\n              <strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n            </>\r\n          }\r\n        />\r\n      ) : (\r\n        \"Nie ma takiego zadania na liście\"\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPages;\r\n","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\n\r\nexport default () => (\r\n  <Container>\r\n    <Header title=\"Autor:\" />\r\n    <Section title=\"Oskar Wojciechowski\" body={<>nana</>} />\r\n  </Container>\r\n);\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  font-size: 20px;\r\n  text-decoration: none;\r\n  color: white;\r\n\r\n  &.${activeClassName} {\r\n    filter: brightness(80%);\r\n  }\r\n`;\r\n\r\nexport const Nav = styled.ul`\r\n  background-color: teal;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n  padding: 0;\r\n`;\r\nexport const NavItem = styled.li`\r\n  list-style: none;\r\n  padding: 20px;\r\n`;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n\r\n}\r\n\r\n*, ::before, ::after {\r\n  box-sizing: inherit;\r\n}\r\n\r\n:focus {\r\n  outline: 2px solid ${({ theme }) => theme.outline};\r\n}\r\n\r\nbody {\r\n  font-family: \"Montserrat\", sans-serif;\r\n  color: ${({ theme }) => theme.text};\r\n  background-color: ${({ theme }) => theme.background};\r\n\r\n}\r\n`;\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./theme.js\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPages from \"./features/tasks/TasksPages/index\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectDarkTheme } from \"./common/themeSlice\";\r\nimport TaskPages from \"./features/tasks/TaskPage\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { StyledNavLink, Nav, NavItem } from \"./styled\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\n\r\nexport default () => {\r\n  const isDarkTheme = useSelector(selectDarkTheme);\r\n  return (\r\n    <ThemeProvider theme={isDarkTheme ? theme.dark : theme.normal}>\r\n      <GlobalStyle />\r\n      <HashRouter>\r\n        <nav>\r\n          <nav>\r\n            <Nav>\r\n              <NavItem>\r\n                <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <StyledNavLink to=\"/o-autorze\">O autorze</StyledNavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <Switch>\r\n              <Route path=\"/zadania/:id\">\r\n                <TaskPages />\r\n              </Route>\r\n              <Route path=\"/zadania\">\r\n                <TasksPages />\r\n              </Route>\r\n              <Route path=\"/o-autorze\">\r\n                <AuthorPage />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Redirect to=\"/zadania\" />\r\n              </Route>\r\n            </Switch>\r\n          </nav>\r\n        </nav>\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n  \r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n","import {\r\n  takeEvery,\r\n  call,\r\n  put,\r\n  takeLatest,\r\n  select,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  fetchExampleTasks,\r\n  selectTasks,\r\n  setTasks,\r\n  setExampleTasksLoading,\r\n} from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./TasksPages/TasksList/getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield put(setExampleTasksLoading(true));\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(setTasks(exampleTasks));\r\n    yield put(setExampleTasksLoading(false));\r\n  } catch (error) {\r\n    yield call(alert, \"Coś poszło nie tak!\");\r\n    yield put(setExampleTasksLoading(false));\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([tasksSaga()]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./common/themeSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n    theme: themeReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}