{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toogleTaskDone","map","id","content","done","key","onClick","Buttons","toogleHideDone","setAlldone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","filter","task","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a976e118.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() !== \"\") {\r\n      addNewTask(newTaskContent.trim());\r\n      setNewTaskContent(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newTaskContent}\r\n        className=\"form__input\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toogleTaskDone }) => (\r\n  <ul className=\"tasks\">\r\n    {tasks.map(({ id, content, done }) => (\r\n      <li\r\n        key={id}\r\n        className={`tasks__item ${\r\n          done && hideDone ? \"tasks__item--hidden\" : \"\"\r\n        }`}\r\n      >\r\n        <button\r\n          className=\"tasks__button tasks__button--toogleDone\"\r\n          onClick={() => toogleTaskDone(id)}\r\n        >\r\n          {done ? \"âœ”\" : \"\"}\r\n        </button>\r\n        <span\r\n          className={`tasks__content ${done ? \"tasks__content--done\" : \"\"}`}\r\n        >\r\n          {content}\r\n        </span>\r\n        <button\r\n          className=\"tasks__button tasks__button--remove\"\r\n          onClick={() => removeTask(id)}\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toogleHideDone, setAlldone }) => (\r\n  <div className=\"buttons\">\r\n    {tasks.length > 0 && (\r\n      <>\r\n        <button onClick={toogleHideDone} className=\"buttons__button\">\r\n          {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n        </button>\r\n        <button\r\n          onClick={setAlldone}\r\n          className=\"buttons__button\"\r\n          disabled={tasks.every(({ done }) => done)}\r\n        >\r\n          UkoÅ„cz wszystkie\r\n        </button>\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <section className=\"section\">\r\n    <div className=\"section__header\">\r\n      <h2 className=\"section__title\">{title}</h2>\r\n      {extraHeaderContent}\r\n    </div>\r\n    <div className=\"section__body\">\r\n      {body}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n  <main className=\"container\">{children}</main>\r\n);\r\n\r\nexport default Container;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n  const [tasks, setTasks] = useState([\r\n\r\n  ]);\r\n\r\n  const toogleHideDone = () => {\r\n    setHideDone((hideDone) => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toogleTaskDone = (id) => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done };\r\n        }\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setAlldone = () => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => ({\r\n        ...task,\r\n        done: true,\r\n      }))\r\n    );\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks((tasks) => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadaÅ„\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        body={\r\n          <Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toogleTaskDone={toogleTaskDone}\r\n          />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toogleHideDone={toogleHideDone}\r\n            setAlldone={setAlldone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}