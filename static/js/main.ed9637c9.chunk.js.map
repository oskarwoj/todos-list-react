{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","GlobalStyle.js","features/tasks/Tasks.js","App.js","store.js","index.js"],"names":["StyledForm","styled","form","Input","input","Button","button","tasksSlice","createSlice","name","initialState","tasks","JSON","parse","localStorage","getItem","hideDone","reducers","addTask","task","payload","push","toogleHideDone","state","toogleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","TaskList","ul","Item","li","hidden","css","Content","span","toogleDone","remove","TasksList","useSelector","map","key","onClick","Container","div","Buttons","areTaskEmpty","isEveryTaskDone","disabled","StyledSection","section","Header","Title","Body","Section","title","body","extraHeaderContent","StyledContainer","main","children","GlobalStyle","createGlobalStyle","Tasks","store","configureStore","reducer","tasksReducer","subscribe","getState","setItem","stringify","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.ed9637c9.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n`;\r\nexport const Button = styled.button`\r\n  padding: 10px;\r\n  background-color: hsl(180, 100%, 25%);\r\n  color: white;\r\n  border: none;\r\n  transition: background 0.5s, transform 0.5s;\r\n\r\n  &:hover {\r\n    background-color: hsl(180, 100%, 30%);\r\n    transform: scale(1.03);\r\n  }\r\n  &:active {\r\n    background-color: hsl(180, 100%, 35%);\r\n  }\r\n`;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: JSON.parse(localStorage.getItem(\"tasks\")) || [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toogleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toogleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toogleHideDone,\r\n  toogleTaskDone,\r\n  setAllDone,\r\n  removeTask,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() !== \"\") {\r\n      dispatch(\r\n        addTask({\r\n          content: newTaskContent.trim(),\r\n          done: false,\r\n          id: nanoid(),\r\n        })\r\n      );\r\n\r\n      setNewTaskContent(\"\");\r\n      focusInput();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const TaskList = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  color: white;\r\n  width: 30px;\r\n  height: 30px;\r\n  padding: 0;\r\n  transition: background 1s;\r\n\r\n  ${({ toogleDone }) =>\r\n    toogleDone &&\r\n    css`\r\n      background-color: hsl(120, 61%, 34%);\r\n\r\n      &:hover {\r\n        background-color: hsl(120, 61%, 70%);\r\n      }\r\n    `}\r\n\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: hsl(348, 83%, 47%);\r\n\r\n      &:hover {\r\n        background-color: hsl(348, 83%, 70%);\r\n      }\r\n    `}\r\n`;\r\n","import React from \"react\";\r\nimport { TaskList, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectTasks,\r\n  toogleTaskDone,\r\n  removeTask,\r\n  selectHideDone,\r\n} from \"../tasksSlice\";\r\n\r\nconst TasksList = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <TaskList>\r\n      {tasks.map(({ id, content, done }) => (\r\n        <Item key={id} hidden={done && hideDone}>\r\n          <Button toogleDone onClick={() => dispatch(toogleTaskDone(id))}>\r\n            {done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={done}>{content}</Content>\r\n          <Button remove onClick={() => dispatch(removeTask(id))}>\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </TaskList>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: transparent;\r\n  color: teal;\r\n  border: none;\r\n  margin: 0 0 0 20px;\r\n  transition: color 0.3s;\r\n\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    margin: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    color: hsl(180, 100%, 35%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: #ccc;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button, Container } from \"./styled\";\r\nimport {\r\n  toogleHideDone,\r\n  setAllDone,\r\n  selectAreTasksEmpty,\r\n  selectIsEveryTaskDone,\r\n  selectHideDone,\r\n} from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const areTaskEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Container>\r\n      {!areTaskEmpty > 0 && (\r\n        <>\r\n          <Button onClick={() => dispatch(toogleHideDone())}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  margin: 10px 0;\r\n  background: white;\r\n  box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  border-bottom: 1px solid #ddd;\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-size: 20px;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  padding: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { Header, StyledSection, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>{body}</Body>\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <StyledContainer>{children}</StyledContainer>\r\n);\r\n\r\nexport default Container;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*,\r\n::before,\r\n::after {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: \"Montserrat\", sans-serif;\r\n  background-color: #eee;\r\n}\r\n`;\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport { GlobalStyle } from \"../../GlobalStyle\";\r\n\r\nfunction Tasks() {\r\n  return (\r\n    <Container>\r\n      <GlobalStyle />\r\n      <Header title=\"Lista zadań\" />\r\n      <Section title=\"Dodaj nowe zadanie\" body={<Form />} />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer, { selectTasksState } from \"./features/tasks/tasksSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() => {\r\n  const { tasks } = selectTasksState(store.getState());\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n});\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}